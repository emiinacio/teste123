package com.artsoft.testeexo.services;

import com.artsoft.testeexo.dto.TABLE2ObjDTO;
import com.artsoft.testeexo.exceptions.NotFoundException;
import com.artsoft.testeexo.mapper.TABLE2ObjMapper;
import com.artsoft.testeexo.mapper.TABLE2ObjReadMapper;
import com.artsoft.testeexo.mapper.TABLE2ObjWriteMapper;
import com.artsoft.testeexo.model.TABLE2;
import com.artsoft.testeexo.repos.TABLE2Repository;
import javax.annotation.processing.Generated;
import lombok.RequiredArgsConstructor;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

@Generated(value = "com.exocode.codegen", comments = "Generated by ExoCoding 0.0.1-SNAPSHOT")
@Service
@RequiredArgsConstructor(onConstructor_ = @Autowired )
public class NovoService {

  private final TABLE2Repository tABLE2Repository;

  private final TABLE2ObjMapper tABLE2ObjMapper;

  private final TABLE2ObjReadMapper tABLE2ObjReadMapper;

  private final TABLE2ObjWriteMapper tABLE2ObjWriteMapper;

  public TABLE2ObjDTO createTABLE2Obj ( TABLE2ObjDTO TABLE2Obj ){
    TABLE2ObjDTO TABLE2ObjOut;
    TABLE2 tABLE2Entity = tABLE2ObjMapper . dtoToEntity ( TABLE2Obj );
    TABLE2 tABLE2Saved = tABLE2Repository . save ( tABLE2Entity );
    TABLE2ObjOut = tABLE2ObjMapper . entityToDto ( tABLE2Saved );
    return TABLE2ObjOut;
  }

  public void deleteTABLE2Obj ( Long idTABLE2 ){
    TABLE2 tABLE2Entity = tABLE2Repository . findById ( idTABLE2 ) .orElseThrow(() -> new NotFoundException());
    tABLE2Repository . delete ( tABLE2Entity );
  }

  public TABLE2ObjDTO readTABLE2Obj ( Long idTABLE2 ){
    TABLE2ObjDTO TABLE2ObjOut;
    TABLE2 tABLE2Entity = tABLE2Repository . findById ( idTABLE2 ) .orElseThrow(() -> new NotFoundException());
    TABLE2ObjOut = tABLE2ObjMapper . entityToDto ( tABLE2Entity );
    return TABLE2ObjOut;
  }

  public TABLE2ObjDTO updateTABLE2Obj ( TABLE2ObjDTO TABLE2Obj ){
    TABLE2ObjDTO TABLE2ObjOut;
    TABLE2 tABLE2Entity = tABLE2Repository . findById ( TABLE2Obj.getIdTABLE2() ) .orElseThrow(() -> new NotFoundException());
    tABLE2ObjMapper . updateFromDto ( tABLE2Entity , TABLE2Obj );
    TABLE2 tABLE2Saved = tABLE2Repository . save ( tABLE2Entity );
    TABLE2ObjOut = tABLE2ObjMapper . entityToDto ( tABLE2Saved );
    return TABLE2ObjOut;
  }
}