package com.artsoft.testeexo.controllers;

import com.artsoft.testeexo.dto.TABLE3ObjDTO;
import com.artsoft.testeexo.mapper.TABLE3ObjMapper;
import com.artsoft.testeexo.schema.TABLE3ObjSchema;
import com.artsoft.testeexo.services.TESTEService;
import io.swagger.v3.oas.annotations.tags.Tag;
import javax.annotation.processing.Generated;
import lombok.RequiredArgsConstructor;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

@Generated(value = "com.exocode.codegen", comments = "Generated by ExoCoding 0.0.1-SNAPSHOT")
@RestController
@Tag(name = "TABLE3Controller")
@RequiredArgsConstructor(onConstructor_ = @Autowired )
public class TABLE3ControllerController {

  private final TESTEService tESTEService;

  private final TABLE3ObjMapper tABLE3ObjMapper;

  @DeleteMapping(path = "/table3obj/{idtable3}")
  protected ResponseEntity<Void> deleteTABLE3Obj ( @PathVariable Long idTABLE3 ){
    tESTEService . deleteTABLE3Obj ( idTABLE3 );
    ResponseEntity<Void> z = new ResponseEntity<> ( HttpStatus.OK );
    return z;
  }

  @GetMapping(path = "/table3obj/{idtable3}")
  protected ResponseEntity<TABLE3ObjSchema> getTABLE3Obj ( @PathVariable Long idTABLE3 ){
    TABLE3ObjDTO TABLE3ObjDTO = tESTEService . readTABLE3Obj ( idTABLE3 );
    TABLE3ObjSchema TABLE3ObjSchema = tABLE3ObjMapper . dtoToSchema ( TABLE3ObjDTO );
    ResponseEntity<TABLE3ObjSchema> z = new ResponseEntity<> ( TABLE3ObjSchema , HttpStatus.OK );
    return z;
  }

  @PostMapping(path = "/table3obj")
  protected ResponseEntity<TABLE3ObjSchema> postTABLE3Obj ( @RequestBody TABLE3ObjSchema TABLE3Obj ){
    TABLE3ObjDTO TABLE3ObjDTO = tABLE3ObjMapper . schemaToDto ( TABLE3Obj );
    TABLE3ObjDTO = tESTEService . createTABLE3Obj ( TABLE3ObjDTO );
    TABLE3ObjSchema TABLE3ObjSchema = tABLE3ObjMapper . dtoToSchema ( TABLE3ObjDTO );
    ResponseEntity<TABLE3ObjSchema> z = new ResponseEntity<> ( TABLE3ObjSchema , HttpStatus.OK );
    return z;
  }

  @PutMapping(path = "/table3obj/{idtable3}")
  protected ResponseEntity<TABLE3ObjSchema> putTABLE3Obj ( @RequestBody TABLE3ObjSchema TABLE3Obj, @PathVariable Long idTABLE3 ){
    TABLE3ObjDTO TABLE3ObjDTO = tABLE3ObjMapper . schemaToDto ( TABLE3Obj );
    TABLE3ObjDTO = tESTEService . updateTABLE3Obj ( TABLE3ObjDTO );
    TABLE3ObjSchema TABLE3ObjSchema = tABLE3ObjMapper . dtoToSchema ( TABLE3ObjDTO );
    ResponseEntity<TABLE3ObjSchema> z = new ResponseEntity<> ( TABLE3ObjSchema , HttpStatus.OK );
    return z;
  }
}