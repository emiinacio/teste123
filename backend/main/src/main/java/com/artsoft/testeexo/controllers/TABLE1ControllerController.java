package com.artsoft.testeexo.controllers;

import com.artsoft.testeexo.dto.TABLE1ObjDTO;
import com.artsoft.testeexo.mapper.TABLE1ObjMapper;
import com.artsoft.testeexo.schema.TABLE1ObjSchema;
import com.artsoft.testeexo.services.DfsService;
import io.swagger.v3.oas.annotations.tags.Tag;
import java.util.List;
import javax.annotation.processing.Generated;
import lombok.RequiredArgsConstructor;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

@Generated(value = "com.exocode.codegen", comments = "Generated by ExoCoding 0.0.1-SNAPSHOT")
@RestController
@Tag(name = "TABLE1Controller")
@RequiredArgsConstructor(onConstructor_ = @Autowired )
public class TABLE1ControllerController {

  private final DfsService dfsService;

  private final TABLE1ObjMapper tABLE1ObjMapper;

  @DeleteMapping(path = "/table1obj/{idtable1}")
  protected ResponseEntity<Void> deleteTABLE1Obj ( @PathVariable Long idTABLE1 ){
    dfsService . deleteTABLE1Obj ( idTABLE1 );
    ResponseEntity<Void> z = new ResponseEntity<> ( HttpStatus.OK );
    return z;
  }

  @GetMapping(path = "/table1obj/{idtable1}")
  protected ResponseEntity<TABLE1ObjSchema> getTABLE1Obj ( @PathVariable Long idTABLE1 ){
    TABLE1ObjDTO TABLE1ObjDTO = dfsService . readTABLE1Obj ( idTABLE1 );
    TABLE1ObjSchema TABLE1ObjSchema = tABLE1ObjMapper . dtoToSchema ( TABLE1ObjDTO );
    ResponseEntity<TABLE1ObjSchema> z = new ResponseEntity<> ( TABLE1ObjSchema , HttpStatus.OK );
    return z;
  }

  @GetMapping(path = "/table1objlist")
  protected ResponseEntity<List<TABLE1ObjSchema>> getTABLE1ObjList (){
    List<TABLE1ObjDTO> TABLE1ObjDTO = dfsService . readTABLE1ObjList();
    List<TABLE1ObjSchema> TABLE1ObjSchema = tABLE1ObjMapper . dtoToSchema ( TABLE1ObjDTO );
    ResponseEntity<List<TABLE1ObjSchema>> z = new ResponseEntity<> ( TABLE1ObjSchema , HttpStatus.OK );
    return z;
  }

  @PostMapping(path = "/table1obj")
  protected ResponseEntity<TABLE1ObjSchema> postTABLE1Obj ( @RequestBody TABLE1ObjSchema TABLE1Obj ){
    TABLE1ObjDTO TABLE1ObjDTO = tABLE1ObjMapper . schemaToDto ( TABLE1Obj );
    TABLE1ObjDTO = dfsService . createTABLE1Obj ( TABLE1ObjDTO );
    TABLE1ObjSchema TABLE1ObjSchema = tABLE1ObjMapper . dtoToSchema ( TABLE1ObjDTO );
    ResponseEntity<TABLE1ObjSchema> z = new ResponseEntity<> ( TABLE1ObjSchema , HttpStatus.OK );
    return z;
  }

  @PutMapping(path = "/table1obj/{idtable1}")
  protected ResponseEntity<TABLE1ObjSchema> putTABLE1Obj ( @PathVariable Long idTABLE1, @RequestBody TABLE1ObjSchema TABLE1Obj ){
    TABLE1ObjDTO TABLE1ObjDTO = tABLE1ObjMapper . schemaToDto ( TABLE1Obj );
    TABLE1ObjDTO = dfsService . updateTABLE1Obj ( TABLE1ObjDTO );
    TABLE1ObjSchema TABLE1ObjSchema = tABLE1ObjMapper . dtoToSchema ( TABLE1ObjDTO );
    ResponseEntity<TABLE1ObjSchema> z = new ResponseEntity<> ( TABLE1ObjSchema , HttpStatus.OK );
    return z;
  }
}